{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/takashimatakuto/Documents/app/chatbot/src/App.jsx\";\nimport React from \"react\";\nimport './App.css';\nimport { Divider } from '@material-ui/core';\nimport defaultDataset from './dataset';\nimport './assets/styles/style.css';\nimport { AnswersList, Chats, Form } from \"./components/index\";\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.displayNextQuestion = nextQuestionId => {\n      //chatsステイトのコピーのようなもの\n      const chats = this.state.chats; //コピーのchatsステイトにtextとtypeを渡す\n      //typeには次に表示する質問ID（nextQuestionId）のquestionが入る\n      //typeには質問を表示するのでquestionをいれる\n\n      chats.push({\n        text: this.state.dataset[nextQuestionId].question,\n        type: \"question\"\n      }); //最初に、次の回答の候補をdatasetから探していれる。\n      //次に、上で入れた情報を、setStateを使って本物のstateにコピーのstateを導入する。\n      //最後に次の質問のID(nextQuestionId)をいれる\n\n      this.setState({\n        answers: this.state.dataset[nextQuestionId].answers,\n        chats: chats,\n        currentId: nextQuestionId\n      });\n    };\n\n    this.selectAnswer = (selectedAnswer, nextQuestionId) => {\n      switch (true) {\n        case nextQuestionId === 'init':\n          setTimeout(() => this.displayNextQuestion(nextQuestionId), 500);\n          break;\n        //httpから始まるnextQuestionIdだったら実行される\n\n        case /^http*/.test(nextQuestionId):\n          const a = document.createElement(\"a\");\n          a.href = nextQuestionId; //別のタグでリングを開けるようにする\n\n          a.target = \"__blank\";\n          a.click();\n          break;\n\n        default:\n          //chatsステイトのコピーのようなもの\n          const chats = this.state.chats; //コピーのchatsステイトにtextとtypeを渡す\n          //selectedAnswerはOOOO\n          //answerをいれるのは回答（userが選ぶ側）ということ\n\n          chats.push({\n            text: selectedAnswer,\n            type: \"answer\"\n          });\n          this.setState({\n            // 本物のchatsにコピーのchatsを入れ込んでいる。\n            chats: chats\n          }); //最後に次の質問を表示させる感酢を呼び出す\n          //呼び出す際に遅延をさせながら呼び出す\n\n          setTimeout(() => this.displayNextQuestion(nextQuestionId), 1000);\n          break;\n      }\n    };\n\n    this.componentDidMount = () => {\n      this.initAnswer = \"\"; //selectedAnswerが空っぽで次の質問は初期状態という引数\n      //つまり、初期状態\n\n      this.selectAnswer(this.initAnswer, this.state.currentId);\n    };\n\n    this.componentDidUpdate = () => {\n      const scrollArea = document.getElementById(\"scroll-area\"); //scrollAreaが存在している場合以下を実行します。\n\n      if (scrollArea) {\n        scrollArea.scrollTop = scrollArea.scrollHeight;\n      }\n    };\n\n    this.handleClickOpen = () => {\n      this.setState({\n        open: true\n      });\n    };\n\n    this.handleClickClose = () => {\n      this.setState({\n        open: false\n      });\n    };\n\n    this.state = {\n      answers: [],\n      chats: [],\n      currentId: \"init\",\n      dataset: defaultDataset,\n      open: true\n    }; //コールバック関数をpropsとして渡す場合はbindが必要\n    //bindをしないとレンダリングされるたびみ毎回毎回関数が作られる\n    //でもbindしておけば関数を一度呼び出したら再利用できるからパフォーマンス向上につながる。\n\n    this.selectAnswer = this.selectAnswer.bind(this);\n    this.handleClickOpen = this.handleClickOpen.bind(this);\n    this.handleClickClose = this.handleClickClose.bind(this);\n  } //次の質問を呼び出す関数\n\n\n  // initAnswer = () => {\n  //   //defaultDatasetの連想配列の中にあるcurrentIdをブラケット構文で取り出している\n  //   const initDataset = this.state.dataset[this.state.currentId]\n  //   //したの定数はどっちでも定義できる\n  //   //const initAnswers = initDataset[answers]  //ブラケット構文\n  //   const initAnswers = initDataset.answers　   //ドット構文\n  //   this.setState({\n  //     answers:initAnswers\n  //   })\n  // }\n  // initChats = () => {\n  //   //defaultDatasetの連想配列の中にあるcurrentIdをブラケット構文で取り出している\n  //   const initDataset = this.state.dataset[this.state.currentId]\n  //   const Chat = {\n  //     text :initDataset.question,\n  //     type : \"question\"\n  //   }\n  //   //chatsステイトのコピーのようなもの\n  //   const chats = this.state.chats\n  //   chats.push(Chat)\n  //   this.setState({\n  //     // 本物のchatsにコピーのchatsを入れ込んでいる。\n  //     chats:chats\n  //   })\n  // }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"c-section\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"c-box\",\n        children: [/*#__PURE__*/_jsxDEV(Chats, {\n          chats: this.state.chats\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(AnswersList, {\n          answers: this.state.answers,\n          select: this.selectAnswer\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form, {\n          open: this.state.open,\n          handleClickClose: this.handleClickClose\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/takashimatakuto/Documents/app/chatbot/src/App.jsx"],"names":["React","Divider","defaultDataset","AnswersList","Chats","Form","App","Component","constructor","props","displayNextQuestion","nextQuestionId","chats","state","push","text","dataset","question","type","setState","answers","currentId","selectAnswer","selectedAnswer","setTimeout","test","a","document","createElement","href","target","click","componentDidMount","initAnswer","componentDidUpdate","scrollArea","getElementById","scrollTop","scrollHeight","handleClickOpen","open","handleClickClose","bind","render"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport './App.css';\nimport { Divider } from '@material-ui/core';\nimport defaultDataset from './dataset';\nimport './assets/styles/style.css';\nimport { AnswersList, Chats, Form} from \"./components/index\";\n\n\n\nexport default class App extends React.Component {\n\n  constructor (props){\n    super(props);\n    this.state = {\n      answers:[],\n      chats:[],\n      currentId:\"init\",\n      dataset:defaultDataset,\n      open: true\n    }\n    //コールバック関数をpropsとして渡す場合はbindが必要\n    //bindをしないとレンダリングされるたびみ毎回毎回関数が作られる\n    //でもbindしておけば関数を一度呼び出したら再利用できるからパフォーマンス向上につながる。\n    this.selectAnswer = this.selectAnswer.bind(this)\n    this.handleClickOpen = this.handleClickOpen.bind(this)\n    this.handleClickClose = this.handleClickClose.bind(this)\n  }\n  //次の質問を呼び出す関数\n  displayNextQuestion = (nextQuestionId)=>{\n        //chatsステイトのコピーのようなもの\n        const chats = this.state.chats\n        //コピーのchatsステイトにtextとtypeを渡す\n        //typeには次に表示する質問ID（nextQuestionId）のquestionが入る\n        //typeには質問を表示するのでquestionをいれる\n        chats.push({\n        text:this.state.dataset[nextQuestionId].question,\n        type:\"question\"\n      })\n      //最初に、次の回答の候補をdatasetから探していれる。\n      //次に、上で入れた情報を、setStateを使って本物のstateにコピーのstateを導入する。\n      //最後に次の質問のID(nextQuestionId)をいれる\n      this.setState({\n        answers:this.state.dataset[nextQuestionId].answers,\n        chats:chats,\n        currentId:nextQuestionId\n      })\n  }\n  \n  selectAnswer = (selectedAnswer, nextQuestionId) => {\n    switch (true) {\n      case (nextQuestionId === 'init'):\n        setTimeout(()=> this.displayNextQuestion(nextQuestionId),500);\n        break;\n        //httpから始まるnextQuestionIdだったら実行される\n      case (/^http*/.test(nextQuestionId)):\n        const a = document.createElement(\"a\");\n        a.href = nextQuestionId;\n        //別のタグでリングを開けるようにする\n        a.target = \"__blank\";\n        a.click();\n        break;\n      default:\n        //chatsステイトのコピーのようなもの\n        const chats = this.state.chats\n        //コピーのchatsステイトにtextとtypeを渡す\n        //selectedAnswerはOOOO\n        //answerをいれるのは回答（userが選ぶ側）ということ\n        chats.push({\n          text :selectedAnswer,\n          type : \"answer\"\n        })\n        this.setState({\n          // 本物のchatsにコピーのchatsを入れ込んでいる。\n          chats:chats\n        })\n\n        //最後に次の質問を表示させる感酢を呼び出す\n        //呼び出す際に遅延をさせながら呼び出す\n        setTimeout(()=> this.displayNextQuestion(nextQuestionId),1000);\n        break;\n    }\n  }\n  componentDidMount=()=>{\n    this.initAnswer = \"\"\n    //selectedAnswerが空っぽで次の質問は初期状態という引数\n    //つまり、初期状態\n    this.selectAnswer(this.initAnswer, this.state.currentId)\n  }\n\n  //chatがでたら１番したにスクロールされるようにする\n  //コンポーネントの変更があったら実行される。\n  //今回の場合だとchatsのstateが変わったら毎回実行される。\n  componentDidUpdate=()=>{\n    const scrollArea = document.getElementById(\"scroll-area\")\n    //scrollAreaが存在している場合以下を実行します。\n    if (scrollArea){\n      scrollArea.scrollTop = scrollArea.scrollHeight\n    }\n  }\n\n  handleClickOpen = () =>{\n    this.setState({\n        open:true\n    })\n}\n\nhandleClickClose = () =>{\n    this.setState({\n        open:false\n    })\n}\n\n\n  // initAnswer = () => {\n  //   //defaultDatasetの連想配列の中にあるcurrentIdをブラケット構文で取り出している\n  //   const initDataset = this.state.dataset[this.state.currentId]\n  //   //したの定数はどっちでも定義できる\n  //   //const initAnswers = initDataset[answers]  //ブラケット構文\n  //   const initAnswers = initDataset.answers　   //ドット構文\n  //   this.setState({\n  //     answers:initAnswers\n  //   })\n  // }\n  \n  // initChats = () => {\n  //   //defaultDatasetの連想配列の中にあるcurrentIdをブラケット構文で取り出している\n  //   const initDataset = this.state.dataset[this.state.currentId]\n  //   const Chat = {\n  //     text :initDataset.question,\n  //     type : \"question\"\n  //   }\n  //   //chatsステイトのコピーのようなもの\n  //   const chats = this.state.chats\n  //   chats.push(Chat)\n  //   this.setState({\n  //     // 本物のchatsにコピーのchatsを入れ込んでいる。\n  //     chats:chats\n  //   })\n  // }\n\n  render (){\n    return (\n      <section className = \"c-section\">\n        <div className = \"c-box\">\n          <Chats chats = {this.state.chats}/>\n          <AnswersList\n            answers = {this.state.answers}\n            select ={this.selectAnswer}\n          />\n          <Form\n            open ={this.state.open}\n            handleClickClose = {this.handleClickClose}\n          />\n        </div>\n      </section>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}